{"version":3,"sources":["components/SelectMode/index.tsx","components/Board/index.tsx","App.tsx","utility.ts"],"names":["SelectMode","setPlayers","View","style","styles","container","buttons","Text","button","Button","title","onPress","Status","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent","flexDirection","marginVertical","marginHorizontal","width","Square","item","value","status","PLAYING","square","TouchableOpacity","Board","board","FlatList","data","renderItem","keyExtractor","Math","random","toString","numColumns","height","borderWidth","calculateWinner","lines","i","length","a","b","c","calculateDraw","some","minimax","isMax","winner","best","App","useState","Array","fill","setBoard","next","setNext","setWinner","setStatus","players","useEffect","wnr","PAUSED","DRAW","makeAIMove","onReset","undefined","index","bestValue","bestMove","moveValue","calculateBestMove","slice","header","map","color","StatusBar","fontSize","margin"],"mappings":"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","file":"static/js/app.6f8a8a0b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { StyleSheet, Text, View, Button } from \"react-native\";\r\n\r\nexport default function SelectMode({\r\n  setPlayers,\r\n}: {\r\n  setPlayers: (num: 1 | 2) => void;\r\n}) {\r\n  return (\r\n    <View style={styles.container}>\r\n      <View style={styles.buttons}>\r\n        <Text>Choose mode</Text>\r\n      </View>\r\n      <View style={styles.buttons}>\r\n        <View style={styles.button}>\r\n          <Button title=\"AI\" onPress={() => setPlayers(1)} />\r\n        </View>\r\n        <View style={styles.button}>\r\n          <Button title=\"HUMAN\" onPress={() => setPlayers(2)} />\r\n        </View>\r\n      </View>\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: \"#fff\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n  buttons: {\r\n    flexDirection: \"row\",\r\n    marginVertical: 10,\r\n  },\r\n  button: {\r\n    marginHorizontal: 10,\r\n    width: 100,\r\n  },\r\n});\r\n","import React from \"react\";\r\nimport {\r\n  StyleSheet,\r\n  Text,\r\n  View,\r\n  FlatList,\r\n  TouchableOpacity,\r\n} from \"react-native\";\r\n\r\nconst Square = ({\r\n  item: { value, onPress, status },\r\n}: {\r\n  item: { value: string; onPress: () => void; status: Status };\r\n  index: number;\r\n}) =>\r\n  status !== Status.PLAYING || value ? (\r\n    <View style={styles.square}>\r\n      <Text>{value}</Text>\r\n    </View>\r\n  ) : (\r\n    <TouchableOpacity style={styles.square} onPress={onPress}>\r\n      <Text>{value}</Text>\r\n    </TouchableOpacity>\r\n  );\r\n\r\nexport default function Board({\r\n  board,\r\n}: {\r\n  board: { value: string; onPress: () => void; status: Status }[];\r\n}) {\r\n  return (\r\n    <View style={styles.board}>\r\n      <FlatList\r\n        data={board}\r\n        renderItem={Square}\r\n        keyExtractor={() => Math.random().toString()}\r\n        numColumns={3}\r\n      />\r\n    </View>\r\n  );\r\n}\r\nenum Status {\r\n  PLAYING,\r\n  PAUSED,\r\n  DRAW,\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  board: {\r\n    width: 148,\r\n    height: 148,\r\n    borderWidth: 2,\r\n  },\r\n  square: {\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    width: 48,\r\n    height: 48,\r\n    borderWidth: 2,\r\n  },\r\n});\r\n","import { StatusBar } from \"expo-status-bar\";\nimport React, { useEffect, useState } from \"react\";\nimport {\n  StyleSheet,\n  Text,\n  View,\n  FlatList,\n  TouchableOpacity,\n  Button,\n} from \"react-native\";\nimport SelectMode from \"./components/SelectMode\";\nimport Board from \"./components/Board\";\nimport { calculateWinner, calculateDraw, calculateBestMove } from \"./utility\";\n\nenum Status {\n  PLAYING,\n  PAUSED,\n  DRAW,\n}\n\nexport default function App() {\n  const [board, setBoard] = useState<Array<\"X\" | \"O\">>(Array(9).fill(null));\n  const [next, setNext] = useState<\"X\" | \"O\">(\"X\");\n  const [winner, setWinner] = useState<string>();\n  const [status, setStatus] = useState(Status.PLAYING);\n  const [players, setPlayers] = useState<0 | 1 | 2>(0);\n\n  useEffect(() => {\n    const wnr = calculateWinner(board);\n    if (wnr) {\n      setStatus(Status.PAUSED);\n      setWinner(wnr);\n    } else if (calculateDraw(board)) {\n      setStatus(Status.DRAW);\n    } else if (next === \"O\" && players === 1) {\n      makeAIMove();\n    }\n  }, [board]);\n\n  useEffect(() => {}, [next]);\n\n  const onPress = (index: number) => {\n    setBoard((board) => {\n      return [...board.slice(0, index), next, ...board.slice(index + 1)];\n    });\n    setNext((next) => (next === \"X\" ? \"O\" : \"X\"));\n  };\n\n  const onReset = () => {\n    setBoard(Array(9).fill(null));\n    setNext(\"X\");\n    setWinner(undefined);\n    setStatus(Status.PLAYING);\n  };\n\n  const getStatus = () => {\n    if (winner) return `Winner: ${winner}`;\n    if (status === Status.DRAW) return \"Draw\";\n    return `Next: ${next}`;\n  };\n\n  const makeAIMove = () => {\n    const index = calculateBestMove(board);\n    if (index !== -1) {\n      setBoard((board) => {\n        return [...board.slice(0, index), \"O\", ...board.slice(index + 1)];\n      });\n      setNext(\"X\");\n    }\n  };\n\n  if (!players) {\n    return <SelectMode setPlayers={setPlayers} />;\n  }\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.header}>TIC TAC TOE</Text>\n      <Board\n        board={board.map((value, i) => ({\n          value,\n          onPress: () => onPress(i),\n          status,\n        }))}\n      />\n      <Text style={styles.status}>{getStatus()}</Text>\n      <View style={styles.buttons}>\n        <View style={styles.button}>\n          <Button title=\"RESET\" color=\"red\" onPress={onReset} />\n        </View>\n        <View style={styles.button}>\n          <Button\n            title=\"BACK\"\n            onPress={() => {\n              onReset();\n              setPlayers(0);\n            }}\n          />\n        </View>\n      </View>\n      <StatusBar style=\"auto\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  header: {\n    fontSize: 24,\n    margin: 16,\n  },\n  container: {\n    flex: 1,\n    backgroundColor: \"#fff\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  board: {\n    width: 148,\n    height: 148,\n    borderWidth: 2,\n  },\n  square: {\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    width: 48,\n    height: 48,\n    borderWidth: 2,\n  },\n  status: {\n    margin: 16,\n  },\n  buttons: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  button: {\n    marginHorizontal: 10,\n    width: 100,\n  },\n});\n","const calculateWinner = (board: (string | null)[]) => {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (board[a] && board[a] === board[b] && board[a] === board[c]) {\r\n      return board[a];\r\n    }\r\n  }\r\n  return null;\r\n};\r\n\r\nconst calculateDraw = (board: (string | null)[]) => {\r\n  return !board.some((square) => !square);\r\n};\r\n\r\nconst calculateBestMove = (board: (string | null)[]) => {\r\n  let bestValue = -1000;\r\n  let bestMove = -1;\r\n  for (let i = 0; i < board.length; i++) {\r\n    const square = board[i];\r\n    if (!square) {\r\n      board[i] = \"O\";\r\n      const moveValue = minimax(board, false);\r\n      board[i] = null;\r\n\r\n      if (moveValue > bestValue) {\r\n        bestValue = moveValue;\r\n        bestMove = i;\r\n      }\r\n    }\r\n  }\r\n\r\n  return bestMove;\r\n};\r\n\r\nconst minimax = (\r\n  [...board]: (string | null)[],\r\n  isMax: boolean,\r\n) => {\r\n  const winner = calculateWinner(board);\r\n  if (winner === 'O') return 10;\r\n  if (winner === 'X') return -10;\r\n  if (calculateDraw(board)) return 0;\r\n  let best = isMax ? -1000 : 1000;\r\n  for (let i = 0; i < board.length; i++) {\r\n    const square = board[i];\r\n    if (!square) {\r\n      board[i] = isMax ? 'O' : 'X';\r\n      best = Math[isMax ? 'max' : 'min'](best, minimax(board, !isMax));\r\n      board[i] = null;\r\n    }\r\n  }\r\n  return best;\r\n};\r\n\r\nexport { calculateWinner, calculateDraw, calculateBestMove };\r\n"],"sourceRoot":""}