{"version":3,"sources":["components/SelectMode/index.tsx","components/Board/index.tsx","App.tsx","utility.ts"],"names":["SelectMode","setPlayers","View","style","styles","container","buttons","Text","button","title","onPress","Status","StyleSheet","create","alignItems","justifyContent","flexDirection","marginVertical","marginHorizontal","minWidth","X","Feather","name","size","color","O","Entypo","Square","item","value","status","thinking","index","square","noBorderRight","noBorderBottom","PLAYING","disabled","icon","Board","board","FlatList","data","renderItem","keyExtractor","Math","random","toString","numColumns","width","height","borderWidth","borderRightWidth","borderBottomWidth","borderRadius","calculateWinner","lines","i","length","a","b","c","calculateDraw","some","calculateBestMove","bestValue","bestMove","moveValue","minimax","isMax","winner","best","App","state","Array","fill","next","players","setState","slice","makeAIMove","onReset","undefined","getStatus","DRAW","setTimeout","prevProps","prevState","this","join","wnr","PAUSED","MainContent","map","header","StatusBar","Component","fontSize","margin","flex","backgroundColor","display"],"mappings":"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","file":"static/js/app.b622c573.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { StyleSheet, Text, View } from \"react-native\";\r\nimport { Button } from \"@react-native-material/core\";\r\n\r\nexport default function SelectMode({\r\n  setPlayers,\r\n}: {\r\n  setPlayers: (num: 1 | 2) => void;\r\n}) {\r\n  return (\r\n    <View style={styles.container}>\r\n      <View style={styles.buttons}>\r\n        <Text>Choose mode</Text>\r\n      </View>\r\n      <View style={styles.buttons}>\r\n        <View style={styles.button}>\r\n          <Button title=\"vs AI\" onPress={() => setPlayers(1)} />\r\n        </View>\r\n        <View style={styles.button}>\r\n          <Button title=\"vs HUMAN\" onPress={() => setPlayers(2)} />\r\n        </View>\r\n      </View>\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    // flex: 1,\r\n    // backgroundColor: \"#fff\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n  buttons: {\r\n    flexDirection: \"row\",\r\n    marginVertical: 10,\r\n  },\r\n  button: {\r\n    marginHorizontal: 10,\r\n    minWidth: 100,\r\n  },\r\n});\r\n","import React from \"react\";\r\nimport {\r\n  StyleSheet,\r\n  View,\r\n  FlatList,\r\n} from \"react-native\";\r\nimport { IconButton } from \"@react-native-material/core\";\r\nimport { Entypo, Feather } from '@expo/vector-icons';\r\n\r\nconst X = <Feather name=\"x\" size={48} color=\"black\" />;\r\nconst O = <Entypo name=\"circle\" size={36} color=\"black\" />;\r\n\r\nconst Square = ({\r\n  item: { value, onPress, status, thinking },\r\n  index,\r\n}: {\r\n  item: { value: string; onPress: () => void; status: Status, thinking: boolean };\r\n  index: number;\r\n}) => {\r\n  const style = [\r\n    styles.square,\r\n    index % 3 === 2 ? styles.noBorderRight : null,\r\n    index > 5 ? styles.noBorderBottom : null,\r\n  ]\r\n  return status !== Status.PLAYING || value ? (\r\n    <IconButton disabled={thinking} style={style} icon={() => value ? value === \"O\" ? O : X : null} />\r\n  ) : (\r\n    <IconButton disabled={thinking} style={style} onPress={onPress} />\r\n  );\r\n}\r\n\r\nexport default function Board({\r\n  board,\r\n}: {\r\n  board: { value: string; onPress: () => void; status: Status, thinking: boolean }[];\r\n}) {\r\n  return (\r\n    <View>\r\n      <FlatList\r\n        data={board}\r\n        renderItem={Square}\r\n        keyExtractor={() => Math.random().toString()}\r\n        numColumns={3}\r\n      />\r\n    </View>\r\n  );\r\n}\r\nenum Status {\r\n  PLAYING,\r\n  PAUSED,\r\n  DRAW,\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  square: {\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    width: 48,\r\n    height: 48,\r\n    borderWidth: 0,\r\n    borderRightWidth: 2,\r\n    borderBottomWidth: 2,\r\n    borderRadius: 0,\r\n  },\r\n  noBorderRight: {\r\n    borderWidth: 0,\r\n    borderRightWidth: 0,\r\n  },\r\n  noBorderBottom: {\r\n    borderWidth: 0,\r\n    borderBottomWidth: 0,\r\n  },\r\n});\r\n","import { StatusBar } from \"expo-status-bar\";\r\nimport React, { Component } from \"react\";\r\nimport {\r\n  StyleSheet,\r\n  Text,\r\n  View,\r\n} from \"react-native\";\r\nimport { Button } from \"@react-native-material/core\";\r\nimport SelectMode from \"./components/SelectMode\";\r\nimport Board from \"./components/Board\";\r\nimport { calculateWinner, calculateDraw, calculateBestMove } from \"./utility\";\r\nimport { IconButton, ActivityIndicator } from \"@react-native-material/core\";\r\n\r\nenum Status {\r\n  PLAYING,\r\n  PAUSED,\r\n  DRAW,\r\n}\r\n\r\ntype AppState = {\r\n  board: Array<\"X\" | \"O\">,\r\n  next: \"X\" | \"O\",\r\n  winner?: string,\r\n  status: Status,\r\n  players: 0 | 1 | 2,\r\n  thinking: boolean,\r\n};\r\n\r\nclass App extends Component {\r\n  state: AppState = {\r\n    board: Array(9).fill(null),\r\n    next: \"X\",\r\n    status: Status.PLAYING,\r\n    players: 0,\r\n    thinking: false,\r\n  };\r\n\r\n  componentDidUpdate(prevProps: Readonly<{}>, prevState: Readonly<AppState>): void {\r\n    const {\r\n      board,\r\n    } = this.state;\r\n\r\n    if (prevState.board.join('') === board.join('')) return;\r\n\r\n    const wnr = calculateWinner(board);\r\n    if (wnr) {\r\n      this.setState({\r\n        status: Status.PAUSED,\r\n        winner: wnr,\r\n        thinking: false,\r\n      });\r\n    } else if (calculateDraw(board)) {\r\n      this.setState({\r\n        status: Status.DRAW,\r\n        thinking: false,\r\n      });\r\n    }\r\n  }\r\n\r\n  onPress = (index: number) => {\r\n    const callback = () => {\r\n      const {\r\n        next,\r\n        players,\r\n      } = this.state;\r\n\r\n      if (next === \"O\" && players === 1) {\r\n        // this.setState({\r\n        //   thinking: true,\r\n        // }, () => {\r\n        //   setTimeout(() => {\r\n            this.makeAIMove();\r\n        //   }, 500);\r\n        // });\r\n      }\r\n    };\r\n\r\n    this.setState(({ board, next }: AppState) => ({\r\n      board: [...board.slice(0, index), next, ...board.slice(index + 1)],\r\n      next: next === \"X\" ? \"O\" : \"X\",\r\n    }), callback);\r\n  };\r\n\r\n  onReset = () => {\r\n    this.setState({\r\n      board: Array(9).fill(null),\r\n      next: \"X\",\r\n      winner: undefined,\r\n      status: Status.PLAYING,\r\n      thinking: false,\r\n    });\r\n  };\r\n\r\n  getStatus = () => {\r\n    const {\r\n      next,\r\n      status,\r\n      winner,\r\n      thinking,\r\n    } = this.state;\r\n\r\n    if (thinking) return (\r\n      <>\r\n        <ActivityIndicator />\r\n        &nbsp;\r\n        Thinking...\r\n      </>\r\n    );\r\n\r\n    if (winner) return `Winner: ${winner}`;\r\n    if (status === Status.DRAW) return \"Draw\";\r\n    return `Next: ${next}`;\r\n  };\r\n\r\n  makeAIMove = () => {\r\n    const {\r\n      board,\r\n    } = this.state;\r\n\r\n    const index = calculateBestMove(board);\r\n    if (index !== -1) {\r\n      this.setState({\r\n        thinking: true,\r\n      }, () => {\r\n        setTimeout(() => {\r\n          this.setState(({ board }: AppState) => ({\r\n            board: [...board.slice(0, index), \"O\", ...board.slice(index + 1)],\r\n            next: \"X\",\r\n            thinking: false,\r\n          }));\r\n        }, 500);\r\n      });\r\n    }\r\n  };\r\n\r\n  setPlayers = (players: 0 | 1 | 2) => this.setState({ players });\r\n\r\n  render(): React.ReactNode {\r\n    const {\r\n      board,\r\n      status,\r\n      players,\r\n      thinking,\r\n    } = this.state;\r\n\r\n    let MainContent;\r\n\r\n    if (players) {\r\n      MainContent = (\r\n        <>\r\n          <Board\r\n            board={board.map((value, i) => ({\r\n              value,\r\n              onPress: () => this.onPress(i),\r\n              status,\r\n              thinking,\r\n            }))}\r\n          />\r\n          <Text style={styles.status}>{this.getStatus()}</Text>\r\n          <View style={styles.buttons}>\r\n            <View style={styles.button}>\r\n              <Button title=\"RESET\" color=\"red\" onPress={this.onReset} />\r\n            </View>\r\n            <View style={styles.button}>\r\n              <Button\r\n                title=\"BACK\"\r\n                onPress={() => {\r\n                  this.onReset();\r\n                  this.setPlayers(0);\r\n                }}\r\n              />\r\n            </View>\r\n          </View>\r\n        </>\r\n      );\r\n    } else {\r\n      MainContent = <SelectMode setPlayers={this.setPlayers} />;\r\n    }\r\n\r\n    return (\r\n      <View style={styles.container}>\r\n        <Text style={styles.header}>TIC TAC TOE</Text>\r\n        {MainContent}\r\n        <StatusBar style=\"auto\" />\r\n      </View>\r\n    );\r\n  };\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  header: {\r\n    fontSize: 24,\r\n    margin: 16,\r\n  },\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: \"#fff\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n  status: {\r\n    margin: 16,\r\n    height: 24,\r\n    display: \"flex\",\r\n  },\r\n  buttons: {\r\n    flexDirection: \"row\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n  button: {\r\n    marginHorizontal: 10,\r\n    width: 100,\r\n  },\r\n});\r\n\r\nexport default App;\r\n","const calculateWinner = (board: (string | null)[]) => {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (board[a] && board[a] === board[b] && board[a] === board[c]) {\r\n      return board[a];\r\n    }\r\n  }\r\n  return null;\r\n};\r\n\r\nconst calculateDraw = (board: (string | null)[]) => {\r\n  return !board.some((square) => !square);\r\n};\r\n\r\nconst calculateBestMove = (board: (string | null)[]) => {\r\n  let bestValue = -1000;\r\n  let bestMove = -1;\r\n  for (let i = 0; i < board.length; i++) {\r\n    const square = board[i];\r\n    if (!square) {\r\n      board[i] = \"O\";\r\n      const moveValue = minimax(board, false);\r\n      board[i] = null;\r\n\r\n      if (moveValue > bestValue) {\r\n        bestValue = moveValue;\r\n        bestMove = i;\r\n      }\r\n    }\r\n  }\r\n\r\n  return bestMove;\r\n};\r\n\r\nconst minimax = (\r\n  [...board]: (string | null)[],\r\n  isMax: boolean,\r\n) => {\r\n  const winner = calculateWinner(board);\r\n  if (winner === 'O') return 10;\r\n  if (winner === 'X') return -10;\r\n  if (calculateDraw(board)) return 0;\r\n  let best = isMax ? -1000 : 1000;\r\n  for (let i = 0; i < board.length; i++) {\r\n    const square = board[i];\r\n    if (!square) {\r\n      board[i] = isMax ? 'O' : 'X';\r\n      best = Math[isMax ? 'max' : 'min'](best, minimax(board, !isMax));\r\n      board[i] = null;\r\n    }\r\n  }\r\n  return best;\r\n};\r\n\r\nexport { calculateWinner, calculateDraw, calculateBestMove };\r\n"],"sourceRoot":""}